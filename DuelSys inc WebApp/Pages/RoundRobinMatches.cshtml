@page
@model RoundRobinMatchesModel
@{
	var playerMatches = Model.AllMatchesPerPlayer;
	var row = 0;
	var cell = row;
}
<script>
	const cells =[]
	const onMatchClicked = (winnerId, loserId) => {
		cells.forEach(el => {
			el.style.background="transparent"
		});
		const  winnerCell = document.getElementById(winnerId)
		const  loserCell = document.getElementById(loserId)
		cells.push(winnerCell,loserCell)
		winnerCell.style.background = "lightgreen"
		loserCell.style.background = "lightcoral"
	}
</script>

<div class="container" id="page-wrapper">
	<table>
		<tr>
			<th>Player</th>
			<th>Result</th>
		</tr>
		@foreach (var playerMatch in playerMatches)
		{
			<tr>
				<td id="@playerMatch.Key">@Model.PlayerIdAndFullName.Where(x => x.Key == playerMatch.Key).Select(x => x.Value).First()</td>
				@foreach (var match in playerMatch.Value)
				{
					if (cell == row)
					{
						cell += 1;
						<td></td>
					}
					cell += 1;
					var results = Model.TournamentResults
					.Where(x => x.MatchId == match.Id)
					.OrderByDescending(y => y.UserId == playerMatch.Key)
					.ToList();
					var rank = results
					.OrderBy(x => x.MatchResult)
					.ToList();
					if (results.Count > 0)
					{
						<td class="result-cell" onclick="onMatchClicked(@rank[0].UserId, @rank[1].UserId)">
							@(results[0].MatchResult) - @(results[1].MatchResult)
						</td>
					}
					else
					{
						<td>Not played</td>
					}
				}
			</tr>
			row += 1;
			cell = 0;
		}
	</table>
	<table>
		<tr>
			<th>Name</th>
			<th>Wins</th>
		</tr>
		@foreach (var rank in Model.Leaderboard)
		{
			<tr>
				<td>@Model.PlayerIdAndFullName.Where(x => x.Key == rank.Key.Id).Select(y => y.Value).First()</td>
				<td>@rank.Value</td>
			</tr>
		}
	</table>
</div>
